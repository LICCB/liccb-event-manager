{# app/Resources/views/liccb/calendar.html.twig #}
{# Variables: page_title, stylesheet, body, javascript, user_entries#}
{% extends 'base.html.twig' %}

{% block head %}
	{{ parent() }}
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.0/jquery.min.js"></script>
{% endblock %}

{% block page_title %}Google Calendar Event Update{% endblock %}

{% block body %}
    <p>Sign in to update events with most recent calendar information</p>

    <button id="authorize-button" style="display: none;">Authorize</button>
    <button id="signout-button" style="display: none;">Sign Out</button>

    <pre id="calendar_information"></pre>

    <script type="text/javascript">
    // Client ID and API key from the Developer Console
    var CLIENT_ID = '33342463234-0k1c2bmrem930askrg8n2ctu4b3kr2vl.apps.googleusercontent.com';

    // Array of API discovery doc URLs for APIs used by the quickstart
    var DISCOVERY_DOCS = ["https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest"];

    // Authorization scopes required by the API; multiple scopes can be
    // included, separated by spaces.
    var SCOPES = "https://www.googleapis.com/auth/calendar.readonly";

    var authorizeButton = document.getElementById('authorize-button');
    var signoutButton = document.getElementById('signout-button');

	var calendarIds = [];
	var allEvents = [];
	var selectedEvents = []
	
    /**
     *  On load, called to load the auth2 library and API client library.
     */
    function handleClientLoad() {
      gapi.load('client:auth2', initClient);
    }

    /**
     *  Initializes the API client library and sets up sign-in state
     *  listeners.
     */
    function initClient() {
        gapi.client.init({
          discoveryDocs: DISCOVERY_DOCS,
          clientId: CLIENT_ID,
          scope: SCOPES
        }).then(function () {
          // Listen for sign-in state changes.
          gapi.auth2.getAuthInstance().isSignedIn.listen(updateSigninStatus);

          // Handle the initial sign-in state.
          updateSigninStatus(gapi.auth2.getAuthInstance().isSignedIn.get());
          authorizeButton.onclick = handleAuthClick;
          signoutButton.onclick = handleSignoutClick;
        });
    }

    /**
     *  Called when the signed in status changes, to update the UI
     *  appropriately. After a sign-in, the API is called.
     */
    function updateSigninStatus(isSignedIn) {
        if (isSignedIn) {
          authorizeButton.style.display = 'none';
          signoutButton.style.display = 'block';
          listUpcomingEvents();
        } else {
          authorizeButton.style.display = 'block';
          signoutButton.style.display = 'none';
        }
    }

    /**
     *  Sign in the user upon button click.
     */
    function handleAuthClick(event) {
      gapi.auth2.getAuthInstance().signIn();
    }

    /**
     *  Sign out the user upon button click.
     */
    function handleSignoutClick(event) {
		gapi.auth2.getAuthInstance().signOut();
		var body_location = document.getElementById("calendar_information");
		body_location.innerHTML = '';
    }

    /**
     * Print the summary and start datetime/date of the next ten events in
     * the authorized user's calendar. If no events are found an
     * appropriate message is printed. Renders form to select calendars to
	 * draw from.
     */
    function listUpcomingEvents() {
		/**
		 *Create form to add elements to for calendars
		 */
		var calendar_form = document.createElement("form");
		calendar_form.name = "calendar_form";
		/* calendar_form.onsubmit="return selectCalendars()"; */
		
        gapi.client.calendar.calendarList.list({
          'maxResults': 10
        }).then(function(response) {
          var calendars = response.result.items;
		  
          if (calendars.length > 0) {
            for (i = 0; i < calendars.length; i++) {
			  /*
			  * Solely push calender ids to calendarIds array
			  */
              var calendar = calendars[i];
			  calendarIds.push(calendar.id);
			  
			  linebreak1 = document.createElement("br");
			  linebreak2 = document.createElement("br");
			  
			  /*Create label for checkbox input*/
			  var inputLabel = document.createElement('label');
			  inputLabel.setAttribute('for', calendar.id + '_input');
			  inputLabel.setAttribute('class', 'calendar-label');
			  
			  /* Text to labels */
			  var inputLabelText = document.createTextNode(calendar.id);
			  inputLabel.appendChild(inputLabelText);
			  
			  /* Create button for the calendar */
			  var calendarInput = document.createElement('input');
			  calendarInput.className = 'calendar-input';
			  calendarInput.setAttribute('class', 'calendar-input');
			  calendarInput.setAttribute('id', calendar.id + '_input');
			  calendarInput.setAttribute('name', calendar.id + '_name');
			  calendarInput.setAttribute('type', 'checkbox');
<<<<<<< HEAD
			  
=======
			  calendarInput.setAttribute('value', calendar.id);
>>>>>>> origin/Google-Calendar
			  
			  calendar_form.appendChild(inputLabel);
			  calendar_form.appendChild(linebreak1);
			  calendar_form.appendChild(calendarInput);
			  calendar_form.appendChild(linebreak2);
            }
			
			/*
			 * Create and add the submit button and calendar form to the page itself
			 */
			var submitButton = document.createElement('input');
			submitButton.setAttribute('type', 'button');
			submitButton.setAttribute('name', 'Submit');
			submitButton.setAttribute('value', 'Submit');
			submitButton.setAttribute('onclick', 'selectCalendars()');
			calendar_form.appendChild(submitButton);
			
			var body_location = document.getElementById("calendar_information");
			body_location.innerHTML = '';
			
			body_location.appendChild(calendar_form);
          } else {
            console.log("No calendars found")
          }
        });
<<<<<<< HEAD
    }
	
	/*
	 * Function to find which ids are checked to be updated
	 */
	function selectCalendars(){
		for(i=0; i<calendarIds.length; i++){
			var input_name = calendarIds[i] + '_input';
			/* var input_value = document.forms["calendar_form"][input_name].value; */
			var input_value = document.getElementById(input_name).checked;
			//console.log(input_value);
			if(input_value == true){
				console.log("Running check on " + calendarIds[i]);
				createEventList(100, calendarIds[i]);
			}
		}
	}
	
	//Function to make date formats compatible with google's API
	function ISODateString(d){
		function pad(n){return n<10 ? '0'+n : n}
		return d.getUTCFullYear()+'-'
			+ pad(d.getUTCMonth()+1)+'-'
			+ pad(d.getUTCDate())+'T'
			+ pad(d.getUTCHours())+':'
			+ pad(d.getUTCMinutes())+':'
			+ pad(d.getUTCSeconds())+'Z'
	}
	
=======
		
		createEventList(5);
    }
	
	function selectCalendars(){
		for(i=0; i<calendarIds.length; i++){
			var input_name = calendarIds[i] + '_name';
			var input_value = document.forms["calendar_form"][input_name].value;
			console.log(input_value);
		}
	}
	
>>>>>>> origin/Google-Calendar
	/*
	* Unpacks a list of events associated with the calendars
	* supplied by previous function. Logs results. Only takes
	* up to num_events events from the calendar
	*/
<<<<<<< HEAD
	function createEventList(num_events, id) {
		//Specify that dates need be created at most two months ago
		var earliestEventDate = new Date();
		earliestEventDate.setMonth(earliestEventDate.getMonth() - 2);
		
		//Use function to make date compatible with Google API
		var compatibleDate = ISODateString(earliestEventDate);
		
		//console.log(compatibleDate);
		
		//Create a request for some number of events
		gapi.client.calendar.events.list({
			'calendarId': id,
			'maxResults': num_events,
			'timeMin': compatibleDate,
			'singleEvents': true
		}).then(function(response){
			if(response.result.items.length > 0){
				for(i=0; i<response.result.items.length; i++){
					//If response has some items in it, discard irrelevant information
					for(var key in response.result.items[i]) {
						//This is a long check, but it's just removing elements that aren't strictly necessary, as the API returns a LOT of information
						if(key != "summary" && key != "id" && key != "description" && key != "location") {
							//This checks for the start time, which is a different type of object so requires a special case
							if(key == "start") {
								response.result.items[i][key] = response.result.items[i][key].dateTime;
							}
							else {
								delete response.result.items[i][key];
							}
						}
					}
				}
				//console.log(response.result);
				postToServer(response.result.items);
			}
			else{
				console.log("Response is empty for calendar " + id);
			}
		});
	  }
=======
	function createEventList(num_events) {
		for(i=0; i<calendarIds.length; i++){
			console.log(calendarIds[i]);
			gapi.client.calendar.events.list({
				'calendarId': calendarIds[i],
				'maxResults': num_events
			}).then(function(response){
				if(response.result.items.length > 0){
					console.log(response.result.items)
				}
				else{
					console.log("Response is empty")
				}
			});
		}
	  }
	  

	
    </script>
>>>>>>> origin/Google-Calendar

	   /*
	    * Function that creates and sends post request to server, including all
		* calendar and event data
	    */
      function postToServer(jsonInformation){
	    //postURL is the url where the post request will be sent
	    var postURL = "calendar/update"
	    var xRequest = new XMLHttpRequest();
		
		//Create a string from the json infromation
		var jsonString = JSON.stringify(jsonInformation);
		
		console.log(jsonString);
		//Settings for the post request
		xRequest.open("POST", postURL, true);
		xRequest.setRequestHeader("Content-Type", "application/json");
		xRequest.send(jsonString);
	  }
	
	</script>
	
    <script async defer src="https://apis.google.com/js/api.js"
      onload="this.onload=function(){};handleClientLoad()"
      onreadystatechange="if (this.readyState === 'complete') this.onload()">
    </script>
{% endblock %}